"""This module contains models of tags generated by the parser and
used by the renderer.
"""


import html


class Tag:
    """Base class for various tags.
    """
    def __init__(self, key):
        self._key = key

    def render(self, engine, context):
        return engine(self).render(context)


class Variable(Tag):
    """Class representing 'Variable' type of Mustache tag.
    """
    def __init__(self, key, escape=True, miss=True):
        self._key = key
        self._escaped = escape
        self._miss = miss

    def getkey(self):
        return self._key


class Literal(Variable):
    """Class representing unescaped variable.
    It is a wrapper returning Variable objects with `escape` param
    set to False.
    """
    def __new__(self, key):
        return Variable(key, escape=False)


class Section(Tag):
    """Class representing 'Section' type of Mustache tag.
    """
    def __init__(self, name, tmplt, *args):
        self._name = name
        self._template = tmplt
        self.assembled = False

    def getname(self):
        return self._name

    def render(self, engine, context, lookup=[], missing=False):
        return engine(self).render(context, lookup, missing)


class Inverted(Section):
    """Class represetnting 'Inverted Section' type of Mustache tag.
    """
    pass


class Injection(Section):
    """Class representing 'Section' type of Mustache tag.
    """
    def getname(self):
        return self._name

    def getpath(self):
        return self._name.split(':', 1)[0]

    def gethookname(self):
        return self._name.split(':', 1)[1]


class Close(Tag):
    """Class representing section closing tag.
    """
    def __init__(self, name):
        self._name = name

    def getname(self):
        return self._name

    def render(self, context):
        return ''


class Comment(Tag):
    """Class representing 'Comment' type of Mustache tag.
    """
    def __init__(self):
        pass

    def render(self, *args, **kwargs):
        return ''


class TextNode(Tag):
    """Class representing plain text node.
    """
    def __init__(self, text):
        self._text = text


class Partial(Tag):
    """Class representing 'Partial' type of Mustache tag.
    """
    def __init__(self, path):
        self._path = path

    def getpath(self):
        return self._path

    def render(self, engine, context, global_context=None, lookup=[], missing=False):
        if global_context is None: global_context = context
        return engine(self).render(context, global_context, lookup, missing)


class Hook(Tag):
    """Class representing hook for injections.
    """
    def getname(self):
        return self._key
